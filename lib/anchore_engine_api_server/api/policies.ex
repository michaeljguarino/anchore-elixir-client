# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule AnchoreEngineAPIServer.Api.Policies do
  @moduledoc """
  API calls for all endpoints tagged `Policies`.
  """

  alias AnchoreEngineAPIServer.Connection
  import AnchoreEngineAPIServer.RequestBuilder


  @doc """
  Add a new policy
  Adds a new policy bundle to the system

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - bundle (PolicyBundle):
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.PolicyBundleRecord{}} on success
  {:error, info} on failure
  """
  @spec add_policy(Tesla.Env.client, AnchoreEngineAPIServer.Model.PolicyBundle.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.PolicyBundleRecord.t} | {:error, Tesla.Env.t}
  def add_policy(connection, bundle, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:post)
    |> url("/policies")
    |> add_param(:body, :bundle, bundle)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.PolicyBundleRecord{})
  end

  @doc """
  Delete policy
  Delete the specified policy

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - policy_id (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec delete_policy(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_policy(connection, policy_id, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:delete)
    |> url("/policies/#{policy_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Get specific policy
  Get the policy bundle content

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - policy_id (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :detail (boolean()): Include policy bundle detail in the form of the full bundle content for each entry
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.PolicyBundleList{}} on success
  {:error, info} on failure
  """
  @spec get_policy(Tesla.Env.client, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.PolicyBundleList.t} | {:error, Tesla.Env.t}
  def get_policy(connection, policy_id, opts \\ []) do
    optional_params = %{
      :detail => :query,
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/policies/#{policy_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.PolicyBundleList{})
  end

  @doc """
  List policies
  List all saved policy bundles

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :detail (boolean()): Include policy bundle detail in the form of the full bundle content for each entry
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.PolicyBundleList{}} on success
  {:error, info} on failure
  """
  @spec list_policies(Tesla.Env.client, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.PolicyBundleList.t} | {:error, Tesla.Env.t}
  def list_policies(connection, opts \\ []) do
    optional_params = %{
      :detail => :query,
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/policies")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.PolicyBundleList{})
  end

  @doc """
  Update policy
  Update/replace and existing policy

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - bundle (PolicyBundleRecord):
  - policy_id (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :active (boolean()): Mark policy as active
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.PolicyBundleList{}} on success
  {:error, info} on failure
  """
  @spec update_policy(Tesla.Env.client, AnchoreEngineAPIServer.Model.PolicyBundleRecord.t, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.PolicyBundleList.t} | {:error, Tesla.Env.t}
  def update_policy(connection, bundle, policy_id, opts \\ []) do
    optional_params = %{
      :active => :query,
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:put)
    |> url("/policies/#{policy_id}")
    |> add_param(:body, :bundle, bundle)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.PolicyBundleList{})
  end
end
