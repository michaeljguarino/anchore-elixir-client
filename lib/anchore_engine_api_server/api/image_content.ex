# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule AnchoreEngineAPIServer.Api.ImageContent do
  @moduledoc """
  API calls for all endpoints tagged `ImageContent`.
  """

  alias AnchoreEngineAPIServer.Connection
  import AnchoreEngineAPIServer.RequestBuilder


  @doc """
  Get the content of an image by type

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_digest (String.t):
  - ctype (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.ContentPackageResponse{}} on success
  {:error, info} on failure
  """
  @spec get_image_content_by_type(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.ContentPackageResponse.t} | {:error, Tesla.Env.t}
  def get_image_content_by_type(connection, image_digest, ctype, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/images/#{image_digest}/content/#{ctype}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.ContentPackageResponse{})
  end

  @doc """
  Get the content of an image by type files

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_digest (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.ContentFilesResponse{}} on success
  {:error, info} on failure
  """
  @spec get_image_content_by_type_files(Tesla.Env.client, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.ContentFilesResponse.t} | {:error, Tesla.Env.t}
  def get_image_content_by_type_files(connection, image_digest, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/images/#{image_digest}/content/files")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.ContentFilesResponse{})
  end

  @doc """
  Get the content of an image by type

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_id (String.t):
  - ctype (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.ContentPackageResponse{}} on success
  {:error, info} on failure
  """
  @spec get_image_content_by_type_image_id(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.ContentPackageResponse.t} | {:error, Tesla.Env.t}
  def get_image_content_by_type_image_id(connection, image_id, ctype, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/images/by_id/#{image_id}/content/#{ctype}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.ContentPackageResponse{})
  end

  @doc """
  Get the content of an image by type files

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_id (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.ContentFilesResponse{}} on success
  {:error, info} on failure
  """
  @spec get_image_content_by_type_image_id_files(Tesla.Env.client, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.ContentFilesResponse.t} | {:error, Tesla.Env.t}
  def get_image_content_by_type_image_id_files(connection, image_id, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/images/by_id/#{image_id}/content/files")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.ContentFilesResponse{})
  end

  @doc """
  Get the content of an image by type java

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_id (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.ContentJavaPackageResponse{}} on success
  {:error, info} on failure
  """
  @spec get_image_content_by_type_image_id_javapackage(Tesla.Env.client, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.ContentJavaPackageResponse.t} | {:error, Tesla.Env.t}
  def get_image_content_by_type_image_id_javapackage(connection, image_id, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/images/by_id/#{image_id}/content/java")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.ContentJavaPackageResponse{})
  end

  @doc """
  Get the content of an image by type java

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_digest (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.ContentJavaPackageResponse{}} on success
  {:error, info} on failure
  """
  @spec get_image_content_by_type_javapackage(Tesla.Env.client, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.ContentJavaPackageResponse.t} | {:error, Tesla.Env.t}
  def get_image_content_by_type_javapackage(connection, image_digest, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/images/#{image_digest}/content/java")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.ContentJavaPackageResponse{})
  end

  @doc """
  Get the content of an image by type malware

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_digest (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.ContentMalwareResponse{}} on success
  {:error, info} on failure
  """
  @spec get_image_content_by_type_malware(Tesla.Env.client, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.ContentMalwareResponse.t} | {:error, Tesla.Env.t}
  def get_image_content_by_type_malware(connection, image_digest, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/images/#{image_digest}/content/malware")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.ContentMalwareResponse{})
  end

  @doc """
  List image content types

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_digest (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, [%String{}, ...]} on success
  {:error, info} on failure
  """
  @spec list_image_content(Tesla.Env.client, String.t, keyword()) :: {:ok, list(String.t)} | {:error, Tesla.Env.t}
  def list_image_content(connection, image_digest, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/images/#{image_digest}/content")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode()
  end

  @doc """
  List image content types

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_id (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, [%String{}, ...]} on success
  {:error, info} on failure
  """
  @spec list_image_content_by_imageid(Tesla.Env.client, String.t, keyword()) :: {:ok, list(String.t)} | {:error, Tesla.Env.t}
  def list_image_content_by_imageid(connection, image_id, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/images/by_id/#{image_id}/content")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode()
  end
end
