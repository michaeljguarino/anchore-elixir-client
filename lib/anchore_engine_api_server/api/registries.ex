# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule AnchoreEngineAPIServer.Api.Registries do
  @moduledoc """
  API calls for all endpoints tagged `Registries`.
  """

  alias AnchoreEngineAPIServer.Connection
  import AnchoreEngineAPIServer.RequestBuilder


  @doc """
  Add a new registry
  Adds a new registry to the system

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - registrydata (RegistryConfigurationRequest):
  - opts (KeywordList): [optional] Optional parameters
    - :validate (boolean()): flag to determine whether or not to validate registry/credential at registry add time
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.RegistryConfigurationList{}} on success
  {:error, info} on failure
  """
  @spec create_registry(Tesla.Env.client, AnchoreEngineAPIServer.Model.RegistryConfigurationRequest.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.RegistryConfigurationList.t} | {:error, Tesla.Env.t}
  def create_registry(connection, registrydata, opts \\ []) do
    optional_params = %{
      :validate => :query,
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:post)
    |> url("/registries")
    |> add_param(:body, :registrydata, registrydata)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.RegistryConfigurationList{})
  end

  @doc """
  Delete a registry configuration
  Delete a registry configuration record from the system. Does not remove any images.

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - registry (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec delete_registry(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_registry(connection, registry, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:delete)
    |> url("/registries/#{registry}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Get a specific registry configuration
  Get information on a specific registry

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - registry (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.RegistryConfiguration{}} on success
  {:error, info} on failure
  """
  @spec get_registry(Tesla.Env.client, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.RegistryConfiguration.t} | {:error, Tesla.Env.t}
  def get_registry(connection, registry, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/registries/#{registry}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.RegistryConfiguration{})
  end

  @doc """
  List configured registries
  List all configured registries the system can/will watch

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.RegistryConfigurationList{}} on success
  {:error, info} on failure
  """
  @spec list_registries(Tesla.Env.client, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.RegistryConfigurationList.t} | {:error, Tesla.Env.t}
  def list_registries(connection, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/registries")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.RegistryConfigurationList{})
  end

  @doc """
  Update/replace a registry configuration
  Replaces an existing registry record with the given record

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - registry (String.t):
  - registrydata (RegistryConfigurationRequest):
  - opts (KeywordList): [optional] Optional parameters
    - :validate (boolean()): flag to determine whether or not to validate registry/credential at registry update time
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.RegistryConfigurationList{}} on success
  {:error, info} on failure
  """
  @spec update_registry(Tesla.Env.client, String.t, AnchoreEngineAPIServer.Model.RegistryConfigurationRequest.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.RegistryConfigurationList.t} | {:error, Tesla.Env.t}
  def update_registry(connection, registry, registrydata, opts \\ []) do
    optional_params = %{
      :validate => :query,
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:put)
    |> url("/registries/#{registry}")
    |> add_param(:body, :registrydata, registrydata)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.RegistryConfigurationList{})
  end
end
