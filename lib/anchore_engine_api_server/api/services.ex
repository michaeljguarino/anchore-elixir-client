# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule AnchoreEngineAPIServer.Api.Services do
  @moduledoc """
  API calls for all endpoints tagged `Services`.
  """

  alias AnchoreEngineAPIServer.Connection
  import AnchoreEngineAPIServer.RequestBuilder


  @doc """
  Delete the service config

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - servicename (String.t): 
  - hostid (String.t): 
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec delete_service(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_service(connection, servicename, hostid, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/system/services/#{servicename}/#{hostid}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Get a service configuration and state

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - servicename (String.t): 
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.ServiceList{}} on success
  {:error, info} on failure
  """
  @spec get_services_by_name(Tesla.Env.client, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.ServiceList.t} | {:error, Tesla.Env.t}
  def get_services_by_name(connection, servicename, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/system/services/#{servicename}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.ServiceList{})
  end

  @doc """
  Get service config for a specific host

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - servicename (String.t): 
  - hostid (String.t): 
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.ServiceList{}} on success
  {:error, info} on failure
  """
  @spec get_services_by_name_and_host(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.ServiceList.t} | {:error, Tesla.Env.t}
  def get_services_by_name_and_host(connection, servicename, hostid, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/system/services/#{servicename}/#{hostid}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.ServiceList{})
  end

  @doc """
  List system services

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.ServiceList{}} on success
  {:error, info} on failure
  """
  @spec list_services(Tesla.Env.client, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.ServiceList.t} | {:error, Tesla.Env.t}
  def list_services(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/system/services")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.ServiceList{})
  end
end
