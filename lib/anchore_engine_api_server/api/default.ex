# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule AnchoreEngineAPIServer.Api.Default do
  @moduledoc """
  API calls for all endpoints tagged `Default`.
  """

  alias AnchoreEngineAPIServer.Connection
  import AnchoreEngineAPIServer.RequestBuilder


  @doc """
  Request a jwt token for subsequent operations, this request is authenticated with normal HTTP auth

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.TokenResponse{}} on success
  {:error, info} on failure
  """
  @spec get_oauth_token(Tesla.Env.client, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.TokenResponse.t} | {:error, Tesla.Env.t}
  def get_oauth_token(connection, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/oauth/token")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.TokenResponse{})
  end

  @doc """
  Health check, returns 200 and no body if service is running

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec health_check(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def health_check(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/health")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Return a list of analyzer artifacts of the specified type

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_digest (String.t): 
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.FileContentSearchList{}} on success
  {:error, info} on failure
  """
  @spec list_file_content_search_results(Tesla.Env.client, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.FileContentSearchList.t} | {:error, Tesla.Env.t}
  def list_file_content_search_results(connection, image_digest, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/images/#{image_digest}/artifacts/file_content_search")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.FileContentSearchList{})
  end

  @doc """
  Return a list of analyzer artifacts of the specified type

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_digest (String.t): 
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.RetrievedFileList{}} on success
  {:error, info} on failure
  """
  @spec list_retrieved_files(Tesla.Env.client, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.RetrievedFileList.t} | {:error, Tesla.Env.t}
  def list_retrieved_files(connection, image_digest, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/images/#{image_digest}/artifacts/retrieved_files")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.RetrievedFileList{})
  end

  @doc """
  Return a list of analyzer artifacts of the specified type

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_digest (String.t): 
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.SecretSearchList{}} on success
  {:error, info} on failure
  """
  @spec list_secret_search_results(Tesla.Env.client, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.SecretSearchList.t} | {:error, Tesla.Env.t}
  def list_secret_search_results(connection, image_digest, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/images/#{image_digest}/artifacts/secret_search")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.SecretSearchList{})
  end

  @doc """
  Simple status check

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.String.t{}} on success
  {:error, info} on failure
  """
  @spec ping(Tesla.Env.client, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def ping(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Returns the version object for the service, including db schema version info

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.ServiceVersion{}} on success
  {:error, info} on failure
  """
  @spec version_check(Tesla.Env.client, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.ServiceVersion.t} | {:error, Tesla.Env.t}
  def version_check(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/version")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.ServiceVersion{})
  end
end
