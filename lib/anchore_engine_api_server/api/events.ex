# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule AnchoreEngineAPIServer.Api.Events do
  @moduledoc """
  API calls for all endpoints tagged `Events`.
  """

  alias AnchoreEngineAPIServer.Connection
  import AnchoreEngineAPIServer.RequestBuilder


  @doc """
  Delete Event
  Delete an event by its event ID

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - event_id (String.t): Event ID of the event to be deleted
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec delete_event(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_event(connection, event_id, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:delete)
    |> url("/events/#{event_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Get Event
  Lookup an event by its event ID

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - event_id (String.t): Event ID of the event for lookup
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.EventResponse{}} on success
  {:error, info} on failure
  """
  @spec get_event(Tesla.Env.client, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.EventResponse.t} | {:error, Tesla.Env.t}
  def get_event(connection, event_id, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/events/#{event_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.EventResponse{})
  end

  @doc """
  List Event Types
  Returns list of event types in the category hierarchy

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.EventTypesList{}} on success
  {:error, info} on failure
  """
  @spec list_event_types(Tesla.Env.client, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.EventTypesList.t} | {:error, Tesla.Env.t}
  def list_event_types(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/event_types")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.EventTypesList{})
  end

  @doc """
  List Events
  Returns a paginated list of events in the descending order of their occurrence. Optional query parameters may be used for filtering results

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :source_servicename (String.t): Filter events by the originating service
    - :source_hostid (String.t): Filter events by the originating host ID
    - :event_type (String.t): Filter events by a prefix match on the event type (e.g. \&quot;user.image.\&quot;)
    - :resource_type (String.t): Filter events by the type of resource - tag, imageDigest, repository etc
    - :resource_id (String.t): Filter events by the id of the resource
    - :level (String.t): Filter events by the level - INFO or ERROR
    - :since (String.t): Return events that occurred after the timestamp
    - :before (String.t): Return events that occurred before the timestamp
    - :page (integer()): Pagination controls - return the nth page of results. Defaults to first page if left empty
    - :limit (integer()): Number of events in the result set. Defaults to 100 if left empty
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.EventsList{}} on success
  {:error, info} on failure
  """
  @spec list_events(Tesla.Env.client, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.EventsList.t} | {:error, Tesla.Env.t}
  def list_events(connection, opts \\ []) do
    optional_params = %{
      :source_servicename => :query,
      :source_hostid => :query,
      :event_type => :query,
      :resource_type => :query,
      :resource_id => :query,
      :level => :query,
      :since => :query,
      :before => :query,
      :page => :query,
      :limit => :query,
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/events")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.EventsList{})
  end
end
