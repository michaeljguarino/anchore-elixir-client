# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule AnchoreEngineAPIServer.Api.PolicyEvaluation do
  @moduledoc """
  API calls for all endpoints tagged `PolicyEvaluation`.
  """

  alias AnchoreEngineAPIServer.Connection
  import AnchoreEngineAPIServer.RequestBuilder


  @doc """
  Check policy evaluation status for image
  Get the policy evaluation for the given image

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_digest (String.t):
  - tag (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :policy_id (String.t):
    - :detail (boolean()):
    - :history (boolean()):
    - :interactive (boolean()):
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.PolicyEvaluationList{}} on success
  {:error, info} on failure
  """
  @spec get_image_policy_check(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.PolicyEvaluationList.t} | {:error, Tesla.Env.t}
  def get_image_policy_check(connection, image_digest, tag, opts \\ []) do
    optional_params = %{
      :policyId => :query,
      :detail => :query,
      :history => :query,
      :interactive => :query,
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/images/#{image_digest}/check")
    |> add_param(:query, :tag, tag)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.PolicyEvaluationList{})
  end

  @doc """
  Check policy evaluation status for image
  Get the policy evaluation for the given image

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_id (String.t):
  - tag (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :policy_id (String.t):
    - :detail (boolean()):
    - :history (boolean()):
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.PolicyEvaluationList{}} on success
  {:error, info} on failure
  """
  @spec get_image_policy_check_by_image_id(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.PolicyEvaluationList.t} | {:error, Tesla.Env.t}
  def get_image_policy_check_by_image_id(connection, image_id, tag, opts \\ []) do
    optional_params = %{
      :policyId => :query,
      :detail => :query,
      :history => :query,
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/images/by_id/#{image_id}/check")
    |> add_param(:query, :tag, tag)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.PolicyEvaluationList{})
  end
end
