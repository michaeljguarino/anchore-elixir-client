# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule AnchoreEngineAPIServer.Api.Images do
  @moduledoc """
  API calls for all endpoints tagged `Images`.
  """

  alias AnchoreEngineAPIServer.Connection
  import AnchoreEngineAPIServer.RequestBuilder


  @doc """
  Submit a new image for analysis by the engine
  Creates a new analysis task that is executed asynchronously

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image (ImageAnalysisRequest):
  - opts (KeywordList): [optional] Optional parameters
    - :force (boolean()): Override any existing entry in the system
    - :autosubscribe (boolean()): Instruct engine to automatically begin watching the added tag for updates from registry
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.AnchoreImageList{}} on success
  {:error, info} on failure
  """
  @spec add_image(Tesla.Env.client, AnchoreEngineAPIServer.Model.ImageAnalysisRequest.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.AnchoreImageList.t} | {:error, Tesla.Env.t}
  def add_image(connection, image, opts \\ []) do
    optional_params = %{
      :force => :query,
      :autosubscribe => :query,
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:post)
    |> url("/images")
    |> add_param(:body, :image, image)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.AnchoreImageList{})
  end

  @doc """
  Delete an image analysis

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_digest (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :force (boolean()):
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.DeleteImageResponse{}} on success
  {:error, info} on failure
  """
  @spec delete_image(Tesla.Env.client, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.DeleteImageResponse.t} | {:error, Tesla.Env.t}
  def delete_image(connection, image_digest, opts \\ []) do
    optional_params = %{
      :force => :query,
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:delete)
    |> url("/images/#{image_digest}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.DeleteImageResponse{})
  end

  @doc """
  Delete image by docker imageId

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_id (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :force (boolean()):
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.DeleteImageResponse{}} on success
  {:error, info} on failure
  """
  @spec delete_image_by_image_id(Tesla.Env.client, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.DeleteImageResponse.t} | {:error, Tesla.Env.t}
  def delete_image_by_image_id(connection, image_id, opts \\ []) do
    optional_params = %{
      :force => :query,
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:delete)
    |> url("/images/by_id/#{image_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.DeleteImageResponse{})
  end

  @doc """
  Bulk mark images for deletion
  Delete analysis for image digests in the list asynchronously

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_digests ([String.t]):
  - opts (KeywordList): [optional] Optional parameters
    - :force (boolean()):
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.DeleteImageResponseList{}} on success
  {:error, info} on failure
  """
  @spec delete_images_async(Tesla.Env.client, list(String.t), keyword()) :: {:ok, AnchoreEngineAPIServer.Model.DeleteImageResponseList.t} | {:error, Tesla.Env.t}
  def delete_images_async(connection, image_digests, opts \\ []) do
    optional_params = %{
      :force => :query,
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:delete)
    |> url("/images")
    |> add_param(:query, :imageDigests, image_digests)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.DeleteImageResponseList{})
  end

  @doc """
  Get image metadata

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_digest (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.AnchoreImageList{}} on success
  {:error, info} on failure
  """
  @spec get_image(Tesla.Env.client, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.AnchoreImageList.t} | {:error, Tesla.Env.t}
  def get_image(connection, image_digest, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/images/#{image_digest}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.AnchoreImageList{})
  end

  @doc """
  Lookup image by docker imageId

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_id (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.AnchoreImageList{}} on success
  {:error, info} on failure
  """
  @spec get_image_by_image_id(Tesla.Env.client, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.AnchoreImageList.t} | {:error, Tesla.Env.t}
  def get_image_by_image_id(connection, image_id, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/images/by_id/#{image_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.AnchoreImageList{})
  end

  @doc """
  Get the content of an image by type

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_digest (String.t):
  - ctype (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.ContentPackageResponse{}} on success
  {:error, info} on failure
  """
  @spec get_image_content_by_type(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.ContentPackageResponse.t} | {:error, Tesla.Env.t}
  def get_image_content_by_type(connection, image_digest, ctype, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/images/#{image_digest}/content/#{ctype}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.ContentPackageResponse{})
  end

  @doc """
  Get the content of an image by type files

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_digest (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.ContentFilesResponse{}} on success
  {:error, info} on failure
  """
  @spec get_image_content_by_type_files(Tesla.Env.client, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.ContentFilesResponse.t} | {:error, Tesla.Env.t}
  def get_image_content_by_type_files(connection, image_digest, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/images/#{image_digest}/content/files")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.ContentFilesResponse{})
  end

  @doc """
  Get the content of an image by type

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_id (String.t):
  - ctype (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.ContentPackageResponse{}} on success
  {:error, info} on failure
  """
  @spec get_image_content_by_type_image_id(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.ContentPackageResponse.t} | {:error, Tesla.Env.t}
  def get_image_content_by_type_image_id(connection, image_id, ctype, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/images/by_id/#{image_id}/content/#{ctype}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.ContentPackageResponse{})
  end

  @doc """
  Get the content of an image by type files

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_id (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.ContentFilesResponse{}} on success
  {:error, info} on failure
  """
  @spec get_image_content_by_type_image_id_files(Tesla.Env.client, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.ContentFilesResponse.t} | {:error, Tesla.Env.t}
  def get_image_content_by_type_image_id_files(connection, image_id, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/images/by_id/#{image_id}/content/files")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.ContentFilesResponse{})
  end

  @doc """
  Get the content of an image by type java

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_id (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.ContentJavaPackageResponse{}} on success
  {:error, info} on failure
  """
  @spec get_image_content_by_type_image_id_javapackage(Tesla.Env.client, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.ContentJavaPackageResponse.t} | {:error, Tesla.Env.t}
  def get_image_content_by_type_image_id_javapackage(connection, image_id, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/images/by_id/#{image_id}/content/java")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.ContentJavaPackageResponse{})
  end

  @doc """
  Get the content of an image by type java

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_digest (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.ContentJavaPackageResponse{}} on success
  {:error, info} on failure
  """
  @spec get_image_content_by_type_javapackage(Tesla.Env.client, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.ContentJavaPackageResponse.t} | {:error, Tesla.Env.t}
  def get_image_content_by_type_javapackage(connection, image_digest, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/images/#{image_digest}/content/java")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.ContentJavaPackageResponse{})
  end

  @doc """
  Get the content of an image by type malware

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_digest (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.ContentMalwareResponse{}} on success
  {:error, info} on failure
  """
  @spec get_image_content_by_type_malware(Tesla.Env.client, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.ContentMalwareResponse.t} | {:error, Tesla.Env.t}
  def get_image_content_by_type_malware(connection, image_digest, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/images/#{image_digest}/content/malware")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.ContentMalwareResponse{})
  end

  @doc """
  Get the metadata of an image by type

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_digest (String.t):
  - mtype (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.MetadataResponse{}} on success
  {:error, info} on failure
  """
  @spec get_image_metadata_by_type(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.MetadataResponse.t} | {:error, Tesla.Env.t}
  def get_image_metadata_by_type(connection, image_digest, mtype, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/images/#{image_digest}/metadata/#{mtype}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.MetadataResponse{})
  end

  @doc """
  Check policy evaluation status for image
  Get the policy evaluation for the given image

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_digest (String.t):
  - tag (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :policy_id (String.t):
    - :detail (boolean()):
    - :history (boolean()):
    - :interactive (boolean()):
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.PolicyEvaluationList{}} on success
  {:error, info} on failure
  """
  @spec get_image_policy_check(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.PolicyEvaluationList.t} | {:error, Tesla.Env.t}
  def get_image_policy_check(connection, image_digest, tag, opts \\ []) do
    optional_params = %{
      :policyId => :query,
      :detail => :query,
      :history => :query,
      :interactive => :query,
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/images/#{image_digest}/check")
    |> add_param(:query, :tag, tag)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.PolicyEvaluationList{})
  end

  @doc """
  Check policy evaluation status for image
  Get the policy evaluation for the given image

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_id (String.t):
  - tag (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :policy_id (String.t):
    - :detail (boolean()):
    - :history (boolean()):
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.PolicyEvaluationList{}} on success
  {:error, info} on failure
  """
  @spec get_image_policy_check_by_image_id(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.PolicyEvaluationList.t} | {:error, Tesla.Env.t}
  def get_image_policy_check_by_image_id(connection, image_id, tag, opts \\ []) do
    optional_params = %{
      :policyId => :query,
      :detail => :query,
      :history => :query,
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/images/by_id/#{image_id}/check")
    |> add_param(:query, :tag, tag)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.PolicyEvaluationList{})
  end

  @doc """
  Get vulnerabilities by type

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_digest (String.t):
  - vtype (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :force_refresh (boolean()):
    - :vendor_only (boolean()):
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.VulnerabilityResponse{}} on success
  {:error, info} on failure
  """
  @spec get_image_vulnerabilities_by_type(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.VulnerabilityResponse.t} | {:error, Tesla.Env.t}
  def get_image_vulnerabilities_by_type(connection, image_digest, vtype, opts \\ []) do
    optional_params = %{
      :force_refresh => :query,
      :vendor_only => :query,
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/images/#{image_digest}/vuln/#{vtype}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.VulnerabilityResponse{})
  end

  @doc """
  Get vulnerabilities by type

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_id (String.t):
  - vtype (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.VulnerabilityResponse{}} on success
  {:error, info} on failure
  """
  @spec get_image_vulnerabilities_by_type_image_id(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.VulnerabilityResponse.t} | {:error, Tesla.Env.t}
  def get_image_vulnerabilities_by_type_image_id(connection, image_id, vtype, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/images/by_id/#{image_id}/vuln/#{vtype}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.VulnerabilityResponse{})
  end

  @doc """
  Get vulnerability types

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_digest (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, [%String{}, ...]} on success
  {:error, info} on failure
  """
  @spec get_image_vulnerability_types(Tesla.Env.client, String.t, keyword()) :: {:ok, list(String.t)} | {:error, Tesla.Env.t}
  def get_image_vulnerability_types(connection, image_digest, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/images/#{image_digest}/vuln")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode()
  end

  @doc """
  Get vulnerability types

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_id (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, [%String{}, ...]} on success
  {:error, info} on failure
  """
  @spec get_image_vulnerability_types_by_image_id(Tesla.Env.client, String.t, keyword()) :: {:ok, list(String.t)} | {:error, Tesla.Env.t}
  def get_image_vulnerability_types_by_image_id(connection, image_id, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/images/by_id/#{image_id}/vuln")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode()
  end

  @doc """
  List image content types

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_digest (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, [%String{}, ...]} on success
  {:error, info} on failure
  """
  @spec list_image_content(Tesla.Env.client, String.t, keyword()) :: {:ok, list(String.t)} | {:error, Tesla.Env.t}
  def list_image_content(connection, image_digest, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/images/#{image_digest}/content")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode()
  end

  @doc """
  List image content types

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_id (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, [%String{}, ...]} on success
  {:error, info} on failure
  """
  @spec list_image_content_by_imageid(Tesla.Env.client, String.t, keyword()) :: {:ok, list(String.t)} | {:error, Tesla.Env.t}
  def list_image_content_by_imageid(connection, image_id, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/images/by_id/#{image_id}/content")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode()
  end

  @doc """
  List image metadata types

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_digest (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, [%String{}, ...]} on success
  {:error, info} on failure
  """
  @spec list_image_metadata(Tesla.Env.client, String.t, keyword()) :: {:ok, list(String.t)} | {:error, Tesla.Env.t}
  def list_image_metadata(connection, image_digest, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/images/#{image_digest}/metadata")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode()
  end

  @doc """
  List all visible images
  List all images visible to the user

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :history (boolean()): Include image history in the response
    - :fulltag (String.t): Full docker-pull string to filter results by (e.g. docker.io/library/nginx:latest, or myhost.com:5000/testimages:v1.1.1)
    - :image_status (String.t): Filter by image_status value on the record. Default if omitted is &#39;active&#39;.
    - :analysis_status (String.t): Filter by analysis_status value on the record.
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.AnchoreImageList{}} on success
  {:error, info} on failure
  """
  @spec list_images(Tesla.Env.client, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.AnchoreImageList.t} | {:error, Tesla.Env.t}
  def list_images(connection, opts \\ []) do
    optional_params = %{
      :history => :query,
      :fulltag => :query,
      :image_status => :query,
      :analysis_status => :query,
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/images")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.AnchoreImageList{})
  end
end
