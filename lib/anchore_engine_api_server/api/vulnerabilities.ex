# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule AnchoreEngineAPIServer.Api.Vulnerabilities do
  @moduledoc """
  API calls for all endpoints tagged `Vulnerabilities`.
  """

  alias AnchoreEngineAPIServer.Connection
  import AnchoreEngineAPIServer.RequestBuilder


  @doc """
  Get vulnerabilities by type

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_digest (String.t):
  - vtype (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :force_refresh (boolean()):
    - :vendor_only (boolean()):
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.VulnerabilityResponse{}} on success
  {:error, info} on failure
  """
  @spec get_image_vulnerabilities_by_type(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.VulnerabilityResponse.t} | {:error, Tesla.Env.t}
  def get_image_vulnerabilities_by_type(connection, image_digest, vtype, opts \\ []) do
    optional_params = %{
      :force_refresh => :query,
      :vendor_only => :query,
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/images/#{image_digest}/vuln/#{vtype}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.VulnerabilityResponse{})
  end

  @doc """
  Get vulnerabilities by type

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_id (String.t):
  - vtype (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.VulnerabilityResponse{}} on success
  {:error, info} on failure
  """
  @spec get_image_vulnerabilities_by_type_image_id(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.VulnerabilityResponse.t} | {:error, Tesla.Env.t}
  def get_image_vulnerabilities_by_type_image_id(connection, image_id, vtype, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/images/by_id/#{image_id}/vuln/#{vtype}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.VulnerabilityResponse{})
  end

  @doc """
  Get vulnerability types

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_digest (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, [%String{}, ...]} on success
  {:error, info} on failure
  """
  @spec get_image_vulnerability_types(Tesla.Env.client, String.t, keyword()) :: {:ok, list(String.t)} | {:error, Tesla.Env.t}
  def get_image_vulnerability_types(connection, image_digest, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/images/#{image_digest}/vuln")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode()
  end

  @doc """
  Get vulnerability types

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_id (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, [%String{}, ...]} on success
  {:error, info} on failure
  """
  @spec get_image_vulnerability_types_by_image_id(Tesla.Env.client, String.t, keyword()) :: {:ok, list(String.t)} | {:error, Tesla.Env.t}
  def get_image_vulnerability_types_by_image_id(connection, image_id, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/images/by_id/#{image_id}/vuln")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode()
  end

  @doc """
  List images vulnerable to the specific vulnerability ID.
  Returns a listing of images and their respective packages vulnerable to the given vulnerability ID

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - vulnerability_id (String.t): The ID of the vulnerability to search for within all images stored in anchore-engine (e.g. CVE-1999-0001)
  - opts (KeywordList): [optional] Optional parameters
    - :namespace (String.t): Filter results to images within the given vulnerability namespace (e.g. debian:8, ubuntu:14.04)
    - :affected_package (String.t): Filter results to images with vulnable packages with the given package name (e.g. libssl)
    - :severity (String.t): Filter results to vulnerable package/vulnerability with the given severity
    - :vendor_only (boolean()): Filter results to include only vulnerabilities that are not marked as invalid by upstream OS vendor data
    - :page (integer()): The page of results to fetch. Pages start at 1
    - :limit (integer()): Limit the number of records for the requested page. If omitted or set to 0, return all results in a single page
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.PaginatedVulnerableImageList{}} on success
  {:error, info} on failure
  """
  @spec query_images_by_vulnerability(Tesla.Env.client, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.PaginatedVulnerableImageList.t} | {:error, Tesla.Env.t}
  def query_images_by_vulnerability(connection, vulnerability_id, opts \\ []) do
    optional_params = %{
      :namespace => :query,
      :affected_package => :query,
      :severity => :query,
      :vendor_only => :query,
      :page => :query,
      :limit => :query,
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/query/images/by_vulnerability")
    |> add_param(:query, :vulnerability_id, vulnerability_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.PaginatedVulnerableImageList{})
  end

  @doc """
  Listing information about given vulnerability
  List (w/filters) vulnerability records known by the system, with affected packages information if present

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - id ([String.t]): The ID of the vulnerability (e.g. CVE-1999-0001)
  - opts (KeywordList): [optional] Optional parameters
    - :affected_package (String.t): Filter results by specified package name (e.g. sed)
    - :affected_package_version (String.t): Filter results by specified package version (e.g. 4.4-1)
    - :page (String.t): The page of results to fetch. Pages start at 1
    - :limit (integer()): Limit the number of records for the requested page. If omitted or set to 0, return all results in a single page
    - :namespace ([String.t]): Namespace(s) to filter vulnerability records by

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.PaginatedVulnerabilityList{}} on success
  {:error, info} on failure
  """
  @spec query_vulnerabilities(Tesla.Env.client, list(String.t), keyword()) :: {:ok, AnchoreEngineAPIServer.Model.PaginatedVulnerabilityList.t} | {:error, Tesla.Env.t}
  def query_vulnerabilities(connection, id, opts \\ []) do
    optional_params = %{
      :affected_package => :query,
      :affected_package_version => :query,
      :page => :query,
      :limit => :query,
      :namespace => :query
    }
    %{}
    |> method(:get)
    |> url("/query/vulnerabilities")
    |> add_param(:query, :id, id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.PaginatedVulnerabilityList{})
  end
end
