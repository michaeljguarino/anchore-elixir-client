# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule AnchoreEngineAPIServer.Api.Subscriptions do
  @moduledoc """
  API calls for all endpoints tagged `Subscriptions`.
  """

  alias AnchoreEngineAPIServer.Connection
  import AnchoreEngineAPIServer.RequestBuilder


  @doc """
  Add a subscription of a specific type
  Create a new subscription to watch a tag and get notifications of changes

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - subscription (SubscriptionRequest):
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.SubscriptionList{}} on success
  {:error, info} on failure
  """
  @spec add_subscription(Tesla.Env.client, AnchoreEngineAPIServer.Model.SubscriptionRequest.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.SubscriptionList.t} | {:error, Tesla.Env.t}
  def add_subscription(connection, subscription, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:post)
    |> url("/subscriptions")
    |> add_param(:body, :subscription, subscription)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.SubscriptionList{})
  end

  @doc """
  Delete subscriptions of a specific type

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - subscription_id (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec delete_subscription(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_subscription(connection, subscription_id, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:delete)
    |> url("/subscriptions/#{subscription_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Get a specific subscription set

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - subscription_id (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.SubscriptionList{}} on success
  {:error, info} on failure
  """
  @spec get_subscription(Tesla.Env.client, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.SubscriptionList.t} | {:error, Tesla.Env.t}
  def get_subscription(connection, subscription_id, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.SubscriptionList{})
  end

  @doc """
  List all subscriptions

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :subscription_key (String.t): filter only subscriptions matching key
    - :subscription_type (String.t): filter only subscriptions matching type
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.SubscriptionList{}} on success
  {:error, info} on failure
  """
  @spec list_subscriptions(Tesla.Env.client, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.SubscriptionList.t} | {:error, Tesla.Env.t}
  def list_subscriptions(connection, opts \\ []) do
    optional_params = %{
      :subscription_key => :query,
      :subscription_type => :query,
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:get)
    |> url("/subscriptions")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.SubscriptionList{})
  end

  @doc """
  Update an existing and specific subscription

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - subscription_id (String.t):
  - subscription (SubscriptionUpdate):
  - opts (KeywordList): [optional] Optional parameters
    - :x_anchore_account (String.t): An account name to change the resource scope of the request to that account, if permissions allow (admin only)

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.SubscriptionList{}} on success
  {:error, info} on failure
  """
  @spec update_subscription(Tesla.Env.client, String.t, AnchoreEngineAPIServer.Model.SubscriptionUpdate.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.SubscriptionList.t} | {:error, Tesla.Env.t}
  def update_subscription(connection, subscription_id, subscription, opts \\ []) do
    optional_params = %{
      :"x-anchore-account" => :headers
    }
    %{}
    |> method(:put)
    |> url("/subscriptions/#{subscription_id}")
    |> add_param(:body, :subscription, subscription)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.SubscriptionList{})
  end
end
