# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule AnchoreEngineAPIServer.Api.System do
  @moduledoc """
  API calls for all endpoints tagged `System`.
  """

  alias AnchoreEngineAPIServer.Connection
  import AnchoreEngineAPIServer.RequestBuilder


  @doc """
  Delete the groups and data for the feed and disable the feed itself

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - feed (String.t):
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec delete_feed(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_feed(connection, feed, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/system/feeds/#{feed}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Delete the group data and disable the group itself

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - feed (String.t):
  - group (String.t):
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec delete_feed_group(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_feed_group(connection, feed, group, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/system/feeds/#{feed}/#{group}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Delete the service config

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - servicename (String.t):
  - hostid (String.t):
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec delete_service(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_service(connection, servicename, hostid, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/system/services/#{servicename}/#{hostid}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Describe anchore engine error codes.
  Describe anchore engine error codes.

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, [%AnchoreErrorCode{}, ...]} on success
  {:error, info} on failure
  """
  @spec describe_error_codes(Tesla.Env.client, keyword()) :: {:ok, list(AnchoreEngineAPIServer.Model.AnchoreErrorCode.t)} | {:error, Tesla.Env.t}
  def describe_error_codes(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/system/error_codes")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%AnchoreEngineAPIServer.Model.AnchoreErrorCode{}])
  end

  @doc """
  Describe the policy language spec implemented by this service.
  Get the policy language spec for this service

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, [%GateSpec{}, ...]} on success
  {:error, info} on failure
  """
  @spec describe_policy(Tesla.Env.client, keyword()) :: {:ok, list(AnchoreEngineAPIServer.Model.GateSpec.t)} | {:error, Tesla.Env.t}
  def describe_policy(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/system/policy_spec")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%AnchoreEngineAPIServer.Model.GateSpec{}])
  end

  @doc """
  System status
  Get the system status including queue lengths

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.SystemStatusResponse{}} on success
  {:error, info} on failure
  """
  @spec get_service_detail(Tesla.Env.client, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.SystemStatusResponse.t} | {:error, Tesla.Env.t}
  def get_service_detail(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/system")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.SystemStatusResponse{})
  end

  @doc """
  Get a service configuration and state

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - servicename (String.t):
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.ServiceList{}} on success
  {:error, info} on failure
  """
  @spec get_services_by_name(Tesla.Env.client, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.ServiceList.t} | {:error, Tesla.Env.t}
  def get_services_by_name(connection, servicename, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/system/services/#{servicename}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.ServiceList{})
  end

  @doc """
  Get service config for a specific host

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - servicename (String.t):
  - hostid (String.t):
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.ServiceList{}} on success
  {:error, info} on failure
  """
  @spec get_services_by_name_and_host(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.ServiceList.t} | {:error, Tesla.Env.t}
  def get_services_by_name_and_host(connection, servicename, hostid, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/system/services/#{servicename}/#{hostid}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.ServiceList{})
  end

  @doc """
  Service status
  Get the API service status

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.StatusResponse{}} on success
  {:error, info} on failure
  """
  @spec get_status(Tesla.Env.client, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.StatusResponse.t} | {:error, Tesla.Env.t}
  def get_status(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/status")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.StatusResponse{})
  end

  @doc """
  list feeds operations and information
  Return a list of feed and their groups along with update and record count information. This data reflects the state of the policy engine, not the upstream feed service itself.

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, [%FeedMetadata{}, ...]} on success
  {:error, info} on failure
  """
  @spec get_system_feeds(Tesla.Env.client, keyword()) :: {:ok, list(AnchoreEngineAPIServer.Model.FeedMetadata.t)} | {:error, Tesla.Env.t}
  def get_system_feeds(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/system/feeds")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%AnchoreEngineAPIServer.Model.FeedMetadata{}])
  end

  @doc """
  List system services

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.ServiceList{}} on success
  {:error, info} on failure
  """
  @spec list_services(Tesla.Env.client, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.ServiceList.t} | {:error, Tesla.Env.t}
  def list_services(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/system/services")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.ServiceList{})
  end

  @doc """
  trigger feeds operations
  Execute a synchronous feed sync operation. The response will block until complete, then return the result summary.

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :flush (boolean()): instruct system to flush existing data feeds records from anchore-engine
    - :sync (boolean()): instruct system to re-sync data feeds

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.FeedSyncResults{}} on success
  {:error, info} on failure
  """
  @spec post_system_feeds(Tesla.Env.client, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.FeedSyncResults.t} | {:error, Tesla.Env.t}
  def post_system_feeds(connection, opts \\ []) do
    optional_params = %{
      :flush => :query,
      :sync => :query
    }
    %{}
    |> method(:post)
    |> url("/system/feeds")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.FeedSyncResults{})
  end

  @doc """
  Disable the feed so that it does not sync on subsequent sync operations

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - feed (String.t):
  - enabled (boolean()):
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.FeedMetadata{}} on success
  {:error, info} on failure
  """
  @spec toggle_feed_enabled(Tesla.Env.client, String.t, boolean(), keyword()) :: {:ok, AnchoreEngineAPIServer.Model.FeedMetadata.t} | {:error, Tesla.Env.t}
  def toggle_feed_enabled(connection, feed, enabled, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/system/feeds/#{feed}")
    |> add_param(:query, :enabled, enabled)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.FeedMetadata{})
  end

  @doc """
  Disable a specific group within a feed to not sync

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - feed (String.t):
  - group (String.t):
  - enabled (boolean()):
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, [%FeedMetadata{}, ...]} on success
  {:error, info} on failure
  """
  @spec toggle_group_enabled(Tesla.Env.client, String.t, String.t, boolean(), keyword()) :: {:ok, list(AnchoreEngineAPIServer.Model.FeedMetadata.t)} | {:error, Tesla.Env.t}
  def toggle_group_enabled(connection, feed, group, enabled, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/system/feeds/#{feed}/#{group}")
    |> add_param(:query, :enabled, enabled)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%AnchoreEngineAPIServer.Model.FeedMetadata{}])
  end
end
