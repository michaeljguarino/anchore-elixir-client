# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule AnchoreEngineAPIServer.Api.Archives do
  @moduledoc """
  API calls for all endpoints tagged `Archives`.
  """

  alias AnchoreEngineAPIServer.Connection
  import AnchoreEngineAPIServer.RequestBuilder


  @doc """

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_references (ImageAnalysisReferences):
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.AddAnalysisArchiveResult{}} on success
  {:error, info} on failure
  """
  @spec archive_image_analysis(Tesla.Env.client, AnchoreEngineAPIServer.Model.ImageAnalysisReferences.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.AddAnalysisArchiveResult.t} | {:error, Tesla.Env.t}
  def archive_image_analysis(connection, image_references, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/archives/images")
    |> add_param(:body, :imageReferences, image_references)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.AddAnalysisArchiveResult{})
  end

  @doc """

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - rule (AnalysisArchiveTransitionRule):
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.AnalysisArchiveTransitionRule{}} on success
  {:error, info} on failure
  """
  @spec create_analysis_archive_rule(Tesla.Env.client, AnchoreEngineAPIServer.Model.AnalysisArchiveTransitionRule.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.AnalysisArchiveTransitionRule.t} | {:error, Tesla.Env.t}
  def create_analysis_archive_rule(connection, rule, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/archives/rules")
    |> add_param(:body, :rule, rule)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.AnalysisArchiveTransitionRule{})
  end

  @doc """

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - rule_id (String.t):
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.AnalysisArchiveTransitionRule{}} on success
  {:error, info} on failure
  """
  @spec delete_analysis_archive_rule(Tesla.Env.client, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.AnalysisArchiveTransitionRule.t} | {:error, Tesla.Env.t}
  def delete_analysis_archive_rule(connection, rule_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/archives/rules/#{rule_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.AnalysisArchiveTransitionRule{})
  end

  @doc """
  Performs a synchronous archive deletion

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_digest (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :force (boolean()):

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.ArchivedAnalysis{}} on success
  {:error, info} on failure
  """
  @spec delete_archived_analysis(Tesla.Env.client, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.ArchivedAnalysis.t} | {:error, Tesla.Env.t}
  def delete_archived_analysis(connection, image_digest, opts \\ []) do
    optional_params = %{
      :force => :query
    }
    %{}
    |> method(:delete)
    |> url("/archives/images/#{image_digest}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.ArchivedAnalysis{})
  end

  @doc """

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - rule_id (String.t):
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.AnalysisArchiveTransitionRule{}} on success
  {:error, info} on failure
  """
  @spec get_analysis_archive_rule(Tesla.Env.client, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.AnalysisArchiveTransitionRule.t} | {:error, Tesla.Env.t}
  def get_analysis_archive_rule(connection, rule_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/archives/rules/#{rule_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.AnalysisArchiveTransitionRule{})
  end

  @doc """
  Returns the archive metadata record identifying the image and tags for the analysis in the archive.

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - image_digest (String.t): The image digest to identify the image analysis
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.ArchivedAnalysis{}} on success
  {:error, info} on failure
  """
  @spec get_archived_analysis(Tesla.Env.client, String.t, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.ArchivedAnalysis.t} | {:error, Tesla.Env.t}
  def get_archived_analysis(connection, image_digest, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/archives/images/#{image_digest}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.ArchivedAnalysis{})
  end

  @doc """

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.ArchivedAnalyses{}} on success
  {:error, info} on failure
  """
  @spec list_analysis_archive(Tesla.Env.client, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.ArchivedAnalyses.t} | {:error, Tesla.Env.t}
  def list_analysis_archive(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/archives/images")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.ArchivedAnalyses{})
  end

  @doc """

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :system_global (boolean()): If true include system global rules (owned by admin) even for non-admin users. Defaults to true if not set. Can be set to false to exclude globals

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.AnalysisArchiveRules{}} on success
  {:error, info} on failure
  """
  @spec list_analysis_archive_rules(Tesla.Env.client, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.AnalysisArchiveRules.t} | {:error, Tesla.Env.t}
  def list_analysis_archive_rules(connection, opts \\ []) do
    optional_params = %{
      :system_global => :query
    }
    %{}
    |> method(:get)
    |> url("/archives/rules")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.AnalysisArchiveRules{})
  end

  @doc """

  ## Parameters

  - connection (AnchoreEngineAPIServer.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %AnchoreEngineAPIServer.Model.ArchiveSummary{}} on success
  {:error, info} on failure
  """
  @spec list_archives(Tesla.Env.client, keyword()) :: {:ok, AnchoreEngineAPIServer.Model.ArchiveSummary.t} | {:error, Tesla.Env.t}
  def list_archives(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/archives")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AnchoreEngineAPIServer.Model.ArchiveSummary{})
  end
end
